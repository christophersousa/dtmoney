{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransaction.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/style.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionContext","createContext","TransactionProvider","children","useState","transaction","setTransactions","transactionInput","a","post","createAt","Date","response","transactions","data","useEffect","get","then","Provider","value","createTransaction","useTransaction","useContext","Container","styled","section","Summary","summary","reduce","acc","type","deposit","amount","total","withdraw","src","incomeimg","alt","Intl","NumberFormat","style","currency","format","outcomeimg","className","totalimg","div","TransactionTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Contant","Header","onOpenNewTransactionModal","LogoImg","onClick","form","TransactionTypeContent","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setType","setTitle","setAmount","setCategory","event","preventDefault","ariaHideApp","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","incomeImg","outcomeImg","GlobalStyle","createGlobalStyle","App","isNewTransactionOpenModal","setIsNewTransactionOpenModal","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0eea2858.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios'\n\nexport const api = axios.create({\n    baseURL: 'http://localhost:3000/api'\n})","import {createContext, ReactNode, useContext, useEffect, useState} from 'react'\nimport { api } from '../services/api';\n\ninterface Transaction{\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, \"id\" | \"createAt\">\n\ninterface TransactionContextData{\n    transaction: Transaction[];\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\ninterface TransactionProviderProps{\n    children: ReactNode,\n}\n\nconst TransactionContext = createContext<TransactionContextData>(\n    {} as TransactionContextData\n)\n\n\nexport function TransactionProvider({children}:TransactionProviderProps){\n    const [transaction, setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() =>{\n        api.get(\"/transactions\")\n            .then(response => setTransactions(response.data.transactions))\n    },[])\n\n    async function createTransaction(transactionInput:TransactionInput){\n        const response = await api.post('/transactions',{\n            ...transactionInput,\n            createAt: new Date()\n        })\n\n        const {transactions} = response.data\n\n        setTransactions([\n            ...transaction,\n            transactions\n        ])\n    }\n\n    return(\n        <TransactionContext.Provider value={{transaction, createTransaction}}>\n            {children}\n        </TransactionContext.Provider>\n    )\n}\n\nexport function useTransaction(){\n    const context = useContext(TransactionContext)\n    return context;\n}","import styled from \"styled-components\";\n\nexport const Container = styled.section `\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: -10rem;\n\n    div{\n        background: var(--shape);\n        padding: 1.5rem 2rem;\n        border-radius: 0.25rem;\n        color: var(--text-title);\n\n        header{ \n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n\n        }\n\n        strong{\n            display: block;\n            margin-top: 1rem;\n            font-size: 2rem;\n            font-weight: 500;\n        }\n\n        &.heighlight-background{\n            background: var(--green);\n            color: #ffffff;\n        }\n    }\n\n    \n`","import incomeimg from \"../../assets/income.svg\"\nimport outcomeimg from \"../../assets/outcome.svg\"\nimport totalimg from \"../../assets/total.svg\"\nimport {useTransaction } from \"../../hooks/useTransaction\";\n\nimport { Container } from \"./styles\";\n\nexport function Summary(){\n\n    const {transaction} = useTransaction()\n\n    const summary = transaction.reduce((acc, transaction) =>{\n        if(transaction.type === 'deposit'){\n            acc.deposit += transaction.amount\n            acc.total += transaction.amount\n        }else{\n            acc.withdraw += transaction.amount\n            acc.total -= transaction.amount\n        }\n        return acc\n    }, {\n        deposit: 0,\n        withdraw: 0,\n        total: 0\n    });\n\n    return(\n        <Container>\n            <div>\n                <header>\n                    <p>Entradas</p>\n                    <img src={incomeimg} alt=\"Entradas\" />\n                </header>\n                <strong>\n                    {new Intl.NumberFormat('pt-br', {\n                            style: 'currency',\n                            currency: 'brl'\n                        }).format(summary.deposit)}\n                </strong>\n            </div>\n            <div>\n                <header>\n                    <p>Saídas</p>\n                    <img src={outcomeimg} alt=\"Saídas\" />\n                </header>\n                <strong>\n                    -\n                    {new Intl.NumberFormat('pt-br', {\n                            style: 'currency',\n                            currency: 'brl'\n                        }).format(summary.withdraw)}\n                </strong>\n            </div>\n            <div className=\"heighlight-background\">\n                <header>\n                    <p>Total</p>\n                    <img src={totalimg} alt=\"Total\" />\n                </header>\n                <strong>\n                    {new Intl.NumberFormat('pt-br', {\n                            style: 'currency',\n                            currency: 'brl'\n                        }).format(summary.total)}\n                </strong>\n            </div>\n        </Container>\n    )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div `\n    margin-top: 3rem;\n\n    table{\n        width: 100%;\n        border-spacing: 0 0.5rem;\n\n        th{ \n            padding: 1rem 2rem;\n            line-height: 1.5rem;\n\n            color: var(--text-body);\n            font-weight: 400;\n            text-align: left;\n        }\n\n        td{\n            border: 0;\n            padding: 1rem 2rem;\n            border-radius: 0.25rem;\n\n            background: var(--shape);\n            color: var(--text-body);\n\n            &:first-child{\n                color: var(--text-title);\n            }\n\n            &.deposit{\n                color: var(--green);\n            }\n\n            &.withdraw{\n                color: var(--red);\n            }\n        }\n    }\n\n    \n`;","import {useTransaction } from \"../../hooks/useTransaction\";\nimport { Container } from \"./styles\";\n\n\n\nexport function TransactionTable(){\n\n    const {transaction} = useTransaction()\n\n    return(\n        <Container>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Título</th>\n                        <th>Valor</th>\n                        <th>Categoria</th>\n                        <th>Data</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    \n                    {transaction.map(response =>{\n                        return(\n                            <tr key={response.id}>\n                                <td>{response.title}</td>\n                                <td className={response.type}>\n                                    {new Intl.NumberFormat('pt-br', {\n                                        style: 'currency',\n                                        currency: 'brl'\n                                    }).format(response.amount)}\n                                </td>\n                                <td>{response.category}</td>\n                                <td>\n                                    {new Intl.DateTimeFormat('pt-br').format(\n                                        new Date(response.createAt)\n                                    )}\n                                </td>\n                            </tr>\n                        )\n                    })}\n                    \n                </tbody>\n            </table>\n        </Container>\n    )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.main `\n    max-width: 1120px;\n    margin: 0 auto;\n    padding: 2.5rem 1rem;\n`;","import { Summary } from \"../Summary\";\nimport { TransactionTable } from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard(){\n    return(\n        <Container>\n            <Summary />\n            <TransactionTable />\n        </Container>\n    )\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from \"styled-components\"\n\nexport const Container = styled.header ` \n    background: var(--blue);\n    \n`;\n\nexport const Contant = styled.div `\n    max-width: 1120px;\n    margin: 0 auto;\n    padding: 2rem 2rem 12rem;\n    \n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button{\n        font-size: 1rem;\n        padding: 0 2rem;\n        height: 3rem;\n\n        border: 0;\n        border-radius: 0.25rem;\n\n        background: var(--blue-light);\n        color: #ffffff;\n\n        transition: filter 1.5s;\n\n        &:hover{\n            filter: grayscale(0.6)\n        }\n    }\n`;","import React from 'react'\nimport LogoImg from '../../assets/logo.svg'\nimport { Container, Contant } from './style'\n\ninterface HeaderProps {\n    onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({onOpenNewTransactionModal}:HeaderProps){\n    return(\n        <Container>\n            <Contant>\n                <img src={LogoImg} alt=\"dt money\" />\n                <button \n                type=\"button\"\n                onClick={onOpenNewTransactionModal}\n                >\n                Nova Transação\n                </button>\n            </Contant>\n        </Container>\n    )\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from \"styled-components\";\nimport {darken, transparentize} from \"polished\"\n\nexport const Container = styled.form `\n\n    h2{\n        color: var(--text-title);\n        font-size: 1.5rem;\n        margin-bottom: 2rem;\n    }\n    input{\n        width: 100%;\n        height: 4rem;\n        padding: 0 1.5rem;\n        border-radius: 0.25rem;\n\n        border: 1px solid #d7d7d7;\n        background: var(--input-background);\n\n        font-weight: 400;\n        font-size: 1rem;\n\n        &::placeholder{\n            color: var(--text-body)\n        }\n\n        & + input{\n            margin-top: 2rem;\n        }\n    }\n\n    button[type=\"submit\"]{\n        width: 100%;\n        height: 4rem;\n        padding: 0 1.5rem;\n        border: 0;\n        border-radius: 0.25rem;\n        background: var(--green);\n        color: #fff;\n        margin-top: 2rem;\n\n        font-size: 1rem;\n        font-weight: 600;\n\n        transition: filter 0.2s;\n\n        &:hover{\n            filter: brightness(0.9);\n        }\n    }\n`\n\nexport const TransactionTypeContent = styled.div`\n    margin: 1rem 0;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: .5rem;\n`\n\ninterface RadioBoxProps {\n    isActive: boolean;\n    activeColor: 'green' | 'red';\n}\n\n\nconst colors = {\n    green: '#33CC95',\n    red: '#E52E4D',\n}\n\nexport const RadioBox = styled.button <RadioBoxProps>`\n    height: 4rem;\n    border: 1px solid #d7d7d7;\n    border-radius: 0.25rem;\n\n    background: ${(props) => props.isActive \n    ? transparentize( 0.9, colors[props.activeColor]):\n     'transparent'};\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: border-color 0.2s;\n\n\n    &:hover{\n        border-color: ${darken(0.1, \"#d7d7d7\")};\n    }\n    img {\n        height: 20px;\n        width: 20px;\n    }\n\n    span {\n        display: inline-block;\n        margin-left: 1rem;\n        font-size: 1rem;\n        color: var(--text-title)\n    }\n`","import React, { FormEvent,useState } from \"react\";\nimport closeImg from \"../../assets/close.svg\"\nimport Modal from \"react-modal\";\nimport {Container, TransactionTypeContent, RadioBox} from \"./styles\"\n\nimport incomeImg from \"../../assets/income.svg\"\nimport outcomeImg from \"../../assets/outcome.svg\"\nimport {useTransaction } from \"../../hooks/useTransaction\";\n\n\n\ninterface NewTransactionModalProps{\n    isOpen: boolean,\n    onRequestClose: () => void\n}\n\nexport function NewTransactionModal({isOpen, onRequestClose}:NewTransactionModalProps){\n\n    const { createTransaction } = useTransaction()\n    const [type, setType] = useState('deposit')\n\n    const [title, setTitle] = useState('')\n    const [amount, setAmount] = useState(0)\n    const [category, setCategory] = useState('')\n\n    async function handleNewTransaction(event: FormEvent){\n        event.preventDefault()\n        await createTransaction({\n            title,\n            amount,\n            type,\n            category \n        })\n\n        setTitle('')\n        setAmount(0)\n        setCategory('')\n        setType('deposit')\n        onRequestClose()\n    }\n\n    return(\n        <Modal\n        isOpen = {isOpen}\n        onRequestClose = {onRequestClose}\n        ariaHideApp={false}\n        overlayClassName= 'react-modal-overlay'\n        className = 'react-modal-content'\n        >\n            <button \n            type=\"button\"\n            onClick={onRequestClose}\n            className=\"react-modal-close\"\n            >\n                <img src={closeImg} alt=\"Fechar o modal\" />\n            </button>\n\n            <Container onSubmit={handleNewTransaction}>\n                <h2>Cadastrar Transação</h2>\n                <input \n                placeholder='Titulo'\n                value= {title}\n                onChange={event => setTitle(event.target.value)}\n                />\n\n                <input \n                type=\"number\"  \n                placeholder=\"Valor\"\n                value={amount}\n                onChange={event => setAmount(Number(event.target.value))}\n                />\n\n                <TransactionTypeContent>\n                    <RadioBox \n                    type=\"button\"\n                    onClick={() =>{setType('deposit')}}\n                    isActive= {type === 'deposit'}\n                    activeColor= 'green'\n                    >\n                        <img src={incomeImg} alt=\"Entrada\" />\n                        <span>Entrada</span>\n                    </RadioBox>\n                    \n                    <RadioBox \n                    type=\"button\"\n                    onClick={() =>{setType('withdraw')}}\n                    isActive= {type === 'withdraw'}\n                    activeColor= 'red'\n                    >\n                        <img src={outcomeImg} alt=\"Saída\" />\n                        <span>Saída</span>\n                    </RadioBox>\n\n                    \n                </TransactionTypeContent>\n\n                <input \n                type=\"text\" \n                placeholder=\"Categoria\"\n                value= {category}\n                onChange={event => setCategory(event.target.value)}\n                />\n\n                <button type=\"submit\">Cadastrar</button>\n            </Container>\n        </Modal>\n    )\n}","import {createGlobalStyle} from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle` \n    :root {\n        --red: #E52E4D;\n        --blue: #5429CC;\n        --green: #33CC95;\n        \n        --blue-light: #6933FF;\n\n        --text-title: #363F5F;\n        --text-body: #969CB3;\n\n        --shape: #ffffff;\n        --background: #F0F2F5;\n\n        --input-background: #e7e9ee;\n    }\n    \n    *{\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n    }\n\n    // Configuração dos efeitos visuais \n    // Desktop font-size: 16px\n    html{\n        @media (max-width:1080px) {\n            font-size: 93.75%; //font-size: 15px\n        }\n\n        @media (max-width: 720px) {\n            font-size: 87.5%; //font-size:14px\n        }\n    }\n\n    body {\n        background: var(--background);\n        -webkit-font-smoothing: antialiased; // Utilizado para melhorar a visualização da font da aplicação\n    }\n\n    body, input, button, textarea {\n        font-family: 'Poppins', sans-serif;\n        font-weight: 400;\n    }\n\n    h1, h2, h3, h4, h5, h6 {\n        font-weight: 600;\n    }\n\n    button {\n        cursor: pointer\n    }\n\n    [disabled] {\n        opacity: 0.6;\n        cursor: not-allowed; // Mostra para o cliente que a tag esta desabilitada\n    }\n    .react-modal-overlay{\n        background: rgba(0,0,0,.5);\n\n        position: fixed;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .react-modal-content{\n        width: 100%;\n        max-width: 575px;\n\n        background: var(--background);\n        position: relative;\n        padding: 3rem;\n        border-radius: .25rem;\n    }\n\n    .react-modal-close{\n        position: absolute;\n        top: 1.5rem;\n        right: 1.5rem;\n        border: 0;\n        background: transparent;\n\n        transition: filter 0.2s;\n\n        &:hover{\n            filter: brightness(0.8)\n        }\n    }\n`","import React, { useState } from \"react\";\n\n\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\nimport { GlobalStyle } from \"./styles/global\";\nimport {TransactionProvider } from \"./hooks/useTransaction\"\n\nexport function App() {\n  const [isNewTransactionOpenModal, setIsNewTransactionOpenModal] = useState(false)\n\n  const handleOpenTransactionModal = () =>{\n    setIsNewTransactionOpenModal(true)\n  }\n\n  const handleCloseTransactionModal = () =>{\n    setIsNewTransactionOpenModal(false)\n  }\n  return (\n    <TransactionProvider>\n      <Header onOpenNewTransactionModal={handleOpenTransactionModal}/>\n      <Dashboard />\n      <NewTransactionModal \n        isOpen ={isNewTransactionOpenModal}\n        onRequestClose={handleCloseTransactionModal}\n      />\n      <GlobalStyle />\n    </TransactionProvider>\n  );\n}\n\n","import { createServer, Model } from 'miragejs';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\ncreateServer({\n\n  models:{\n    transactions: Model,\n  },\n\n  seeds(server){\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Freelance website',\n          amount: 6000,\n          type: 'deposit',\n          category: 'Dev',\n          createAt: new Date('2021-06-17 09:00:00')\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          amount: 1100,\n          type: 'withdraw',\n          category: 'Casa',\n          createAt: new Date('2021-06-03 17:30:00')\n        },\n      ]\n    })\n  },\n\n  routes(){\n    this.namespace = 'api';\n    this.get('transactions', () => {\n      return this.schema.all('transactions')\n    })\n\n    this.post('transactions',(schema, request) => {\n      const data = JSON.parse(request.requestBody)\n      \n      return schema.create('transactions', data)\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}